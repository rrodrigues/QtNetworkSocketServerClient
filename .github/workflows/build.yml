name: build

on:
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  QT_VERSION: 5.15.2

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest]
    steps:
    - uses: actions/checkout@v2
    
    - name: Download Qt
      id: qt
      shell: cmake -P {0}
      run: |
        set(qt_version $ENV{QT_VERSION})
        string(REPLACE "." "" qt_version_dotless "${qt_version}")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(url_os "windows_x86")
          if ("${{ matrix.config.environment_script }}" MATCHES "vcvars64.bat")
            set(qt_package_name "qt.qt5.${qt_version_dotless}.win64_msvc2017_64")
            set(qt_dir_prefix "${qt_version}/msvc2017_64")
          elseif ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
            set(qt_package_name "qt.qt5.${qt_version_dotless}.win32_msvc2017")
            set(qt_dir_prefix "${qt_version}/msvc2017")
          else()
          endif()
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(url_os "linux_x64")
          set(qt_package_name "qt.qt5.${qt_version_dotless}.gcc_64")
          set(qt_dir_prefix "${qt_version}/gcc_64")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(url_os "mac_x64")
          set(qt_package_name "qt.qt5.${qt_version_dotless}.clang_64")
          set(qt_dir_prefix "${qt_version}/clang_64")
        endif()
        set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt5_${qt_version_dotless}")
        file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)
        file(READ ./Updates.xml updates_xml)
        string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
          updates_xml_output "${updates_xml}")
        set(package_version ${CMAKE_MATCH_1})
        set(package_suffix ${CMAKE_MATCH_2})
        string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")
        # Workaround for CMake's greedy regex
        if ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
          string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
        endif()
        file(MAKE_DIRECTORY qt5)
        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt5/${qt_dir_prefix}" qt_dir)
        message("::set-output name=qt_dir::${qt_dir}")
        foreach(package qtbase qtdeclarative qttools qtsvg)
          file(DOWNLOAD
            "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z" ./${package}.7z
            SHOW_PROGRESS
          )
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY qt5)
        endforeach()
        file(READ "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
        string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
        string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck64" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
        file(WRITE "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PREFIX_PATH=${{ steps.qt.outputs.qt_dir }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Install
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --install . --prefix dist

    - name: Upload server
      uses: actions/upload-artifact@v2
      with:
        name: server
        path: ${{github.workspace}}/build/dist/server/server.app

    - name: Upload client
      uses: actions/upload-artifact@v2
      with:
        name: client
        path: ${{github.workspace}}/build/dist/client/client.app
